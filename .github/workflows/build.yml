name: Test & Build

on:
  schedule:
    - cron: "00 10 * * 1"
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache Images
        uses: actions/cache@v4
        with:
          path: /tmp/images
          key: ${{ runner.os }}-images-${{ github.run_id }}-${{ github.run_number }}
      - name: Build Images
        run: |
          make build
          mkdir -p /tmp/images
          docker save -o /tmp/images/s3-antivirus.tar 311462405659.dkr.ecr.eu-west-1.amazonaws.com/s3-antivirus:latest
          docker save -o /tmp/images/s3-antivirus-update.tar 311462405659.dkr.ecr.eu-west-1.amazonaws.com/s3-antivirus-update:latest

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Go Dependencies
        uses: actions/cache@v4
        with:
          path: .gocache
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Unit Tests
        run: make unit-test

      - name: Upload Code Coverage
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: test-results/test-coverage.txt
          fail_ci_if_error: true
          verbose: true

  code-test:
    name: Code Quality Tests
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - uses: actions/checkout@v4
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      - name: Run linting
        run: make lint

      - name: Run Gosec Security Scanner
        run: make go-sec

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: test-results/go-sec.sarif

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.19

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  acceptance-test:
    name: Acceptance Test
    runs-on: ubuntu-latest
    needs:
      - build
      - unit-test
    steps:
      - uses: actions/checkout@v4
      - name: Cache Images
        uses: actions/cache@v4
        with:
          path: /tmp/images
          key: ${{ runner.os }}-images-${{ github.run_id }}-${{ github.run_number }}
      - name: Restore images
        run: |
          docker load -i /tmp/images/s3-antivirus.tar
      - name: Run Acceptance Tests
        run: make acceptance-test

  build-lambda-zip:
    name: "Build Lambda Zip"
    runs-on: ubuntu-latest
    needs: ['build', 'unit-test', 'code-test', 'acceptance-test']
    if: github.actor != 'dependabot[bot]'
    outputs:
      branch: ${{ steps.set-outputs.outputs.branch }}
      tag: ${{ steps.bump_version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: Lambda Package - Zip Build
        run: |
          make lambda-zip-build
        id: lambda-zip-build
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: myFunction
          path: build/myFunction.zip
      - name: Cleanup
        run: |
          make lambda-zip-clear

  build-lambda-layer-zip:
    name: "Build Lambda Layer Zip"
    runs-on: ubuntu-latest
    needs: ['build', 'unit-test', 'code-test', 'acceptance-test']
    if: github.actor != 'dependabot[bot]'
    outputs:
      branch: ${{ steps.set-outputs.outputs.branch }}
      tag: ${{ steps.bump_version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: Layer Package - Zip Build
        run: |
          make layer-zip-build
        id: layer-zip-build
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: lambda_layer
          path: build/lambda_layer.zip
      - name: Test layer
        run: |
          make layer-zip-test
      - name: Cleanup
        run: |
          make layer-zip-clear
  push:
    name: "Build & Push Containers"
    runs-on: ubuntu-latest
    needs: ['build', 'unit-test', 'code-test', 'acceptance-test']
    if: github.actor != 'dependabot[bot]'
    outputs:
      branch: ${{ steps.set-outputs.outputs.branch }}
      tag: ${{ steps.bump_version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: Extract branch name
        run: |
          if [ "${{ github.head_ref }}" == "" ]; then
            echo BRANCH_NAME=main >> $GITHUB_ENV
          else
            echo BRANCH_NAME=${{ github.head_ref }} >> $GITHUB_ENV
          fi
        id: extract_branch
      - uses: unfor19/install-aws-cli-action@v1

      - name: Cache Images
        uses: actions/cache@v4
        with:
          path: /tmp/images
          key: ${{ runner.os }}-images-${{ github.run_id }}-${{ github.run_number }}

      - name: Restore Image
        run: |
          docker load -i /tmp/images/s3-antivirus.tar
          docker load -i /tmp/images/s3-antivirus-update.tar

      - name: Trivy Image Vulnerability Scanner
        run: make scan

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'test-results/trivy.sarif'

      - name: Bump version
        id: bump_version
        uses: anothrNick/github-tag-action@1.69.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: minor
          PRERELEASE: true
          PRERELEASE_SUFFIX: ${{ env.BRANCH_NAME }}
          RELEASE_BRANCHES: main
          WITH_V: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: 311462405659

      - name: Push Function Container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: s3-antivirus
        run: |
          docker tag 311462405659.dkr.ecr.eu-west-1.amazonaws.com/s3-antivirus:latest 311462405659.dkr.ecr.eu-west-1.amazonaws.com/s3-antivirus:${{ steps.bump_version.outputs.tag }}
          if [ $BRANCH_NAME == "main" ]; then
            docker tag 311462405659.dkr.ecr.eu-west-1.amazonaws.com/s3-antivirus:latest 311462405659.dkr.ecr.eu-west-1.amazonaws.com/s3-antivirus:main-${{ steps.bump_version.outputs.tag }}
            # We want all of the tags pushed
            docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          else
            docker push 311462405659.dkr.ecr.eu-west-1.amazonaws.com/s3-antivirus:${{ steps.bump_version.outputs.tag }}
          fi

      - name: Push Update Function Container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: s3-antivirus-update
        run: |
          docker tag 311462405659.dkr.ecr.eu-west-1.amazonaws.com/s3-antivirus-update:latest 311462405659.dkr.ecr.eu-west-1.amazonaws.com/s3-antivirus-update:${{ steps.bump_version.outputs.tag }}
          if [ $BRANCH_NAME == "main" ]; then
            # We want all of the tags pushed
            docker tag 311462405659.dkr.ecr.eu-west-1.amazonaws.com/s3-antivirus-update:latest 311462405659.dkr.ecr.eu-west-1.amazonaws.com/s3-antivirus-update:main-${{ steps.bump_version.outputs.tag }}
            docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          else
            docker push 311462405659.dkr.ecr.eu-west-1.amazonaws.com/s3-antivirus-update:${{ steps.bump_version.outputs.tag }}
          fi

  release-zips:
    runs-on: ubuntu-latest
    needs: [ push, build-lambda-zip, build-lambda-layer-zip]
    # if: github.ref == 'refs/heads/main'
    steps:
      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ needs.push.outputs.tag }}
          tag_name: ${{ needs.push.outputs.tag }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Get Lambda artifact
        uses: actions/download-artifact@v2
        with:
          name: myFunction
          path: release
      - name: Get Lambda Layer artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda_layer
          path: release
      - name: upload Lambda artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/myFunction.zip
          asset_name: myFunction-amd64.zip
          asset_content_type: application/zip
      - name: upload Lambda Layer artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/lambda_layer.zip
          asset_name: lambda_layer-amd64.zip
          asset_content_type: application/zip

  push-tags:
    runs-on: ubuntu-latest
    needs: push
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::997462338508:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Push Tag to Parameter Store
        run: |
          aws ssm put-parameter --name "opg-s3-antivirus-latest-green-build" --type "String" --value "${{ needs.push.outputs.tag }}" --overwrite --region=eu-west-1
